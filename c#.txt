今天天气好晴朗，处处有阳光rk框架
.Net FrameWork框架是.Net平台中不可缺少的一部分，它提供了一个稳定的运行环境来保证我们基于.Net平添开发的各种他应用能够正常的运转
CLR公共语言运行时     .Net类库
C#(sharp):一种变成语言，可以开发基于.Net平台的应用
.NET两种交互模式
C/S:客户机/服务器模式比如：qq
B/S：浏览器/服务器比如：浏览器
引用命名空间using
项目的命名空间，大多数时间也是项目本身 的名称namespace
类名称class
方法或者叫函数public static void
大括号内部即为方法体，用于写具体方法代码。
只需要知道：c#入口程序规定的方法必须是静态方法，方法名必须为main，括号内的参数必须是String数据
这里的方法名是main，返回值 是void，表示没有任何返回值。
方法定义了一组执行语句，方法内部的代码将会被一次顺序执行
在class内部，可以定义若干方法：
c#是面向对象的语言，一个程序的基本单位就是class，这里定义的class名字就是Program
public是访问修饰符，表示该class是公开的
c#是大小写铭感的
所有的语句和表达式必须以分号结尾
只要有分号的出现就是一句语句
与java不同的是，文件名可以不同于类的名称
c#是一种面向对象的程序语言，在面向对象的程序设计方法中，程序有各种对象组成。相同种类的对象通常具有相同类型
关键字是具有特定意义的预定义保留标识符，他们不能再程序中用做标识符
c#的注释方式
单行注释使用//符号表示，例如：
文档注释用///符号表示，例如：
///《summary》
///这是主程序入口
使用文件流来实现多媒体文件的赋值就是通过源文件读取出来然后再把读取的数据复制再另一个文键中

整数类型
byte的范围：0-255
short的范围：-32768-32767
int的范围：-2147483648-2147483647
long
long的类型不能给int 类型赋值

浮点型：小数类型
float +-3.4*10^28
小数类型可以赋值给int类型，不过赋值之后就变成整数
double 双精度类型
如果赋值给一个变量是小数，且不加任何后缀，系统则会将其默认为double类型，此时若用float申明变量去接受，则会报错
float f=1.1f；

空类型：null

十进制类型：
decimal 比浮点类型float更加准确，货币类型
（+-7.9*10^28）/(10^(0-28))
decimal de=1.1M;
浮点类型转换只有float与double转换的一种，其他的都会报错

bool类型：true false
字符串类型：string char

5，c#语法进阶
表达式
表达式由操作数和运算符构成。运算符的示例包括+，-，*，/和new，操作数的示例包括文本，字段，局部变量和表达式。

当表达式包含多个运算符，运算符的优先级控制各运算符的计算顺序，例如，表达式x+y*z按x+（y*z）计算，因为*运算符的优先级高于+的运算符

（了解）带动书运算符都可以重载。运算符重载允许指定用户定义的运算符是实现来执行运算，这些运算的操作数种至少有一个，甚至所有操作数都属于用户的定义类型或结构类型。

下表总结了c#简单常用的运算符，并按优先级从高到低的顺序列出各运算符的类别，同一类别中的运算符优先级相同
基本   x.m成员访问
         x（...）方法和委托调用
         x[...]数组和索引器访问
         new T(...)对象和委托创建
         new T(...){...}使用创建值设定项创建对象
         new{...}匿名对象初始值设定项
         newT[...]数组创建
一元 （T）x将x显示转换为类型T

变量定义：全局变量和局部变量，先看小范围的局部变量，而全局变量就会失效，就近原则
当然也可以像视屏中这样子转换，可以理解为z里面值添加到“加法：里面去”
这个操作就叫做拼串，顾名思义就是把两个字符串拼接在一起
这个“加法”+z
两个整形变量相除，结果只取整数位上的数字

字符串也可以相互相加比如
string s1=“Hello”，s2=“World”，res；
res=s1+s2；
MessageBox.Show(res);

x??y   如果x为null，则计算结果为y，否则计算结果为x

三元 x？y：z如果x为true，则对y求值；如果x为false，则对z求值
bool b=true；
MessageBox.Show((!b).ToString());
输出 false

while  和do while和for 循环都是可以进行循环语句
监听是可以使用死循环进行无限次监听这样子达到目的就可以回馈给用户听嗯，你收到消息了
不然用户就不会知道有人发消息过来while （true）

数组：
1，数组是一组相同类型的数据
2，数组中的数据需要通过数字索引来访问
数组的声明：
1，数组的声明需要使用new关键字
2，在声明数组时，可以使用{}来初始化数组中的元素
3，如果在数组声明之初没有使用大括号来初始化数组中的元素，则需要指定数组的大小
4，在声明初始化元素的数组时，也可以指定数组大小
//声明没有元素的数组
int[] ints=new int[6]
//声明初始化有元素
int []ints=new int[]{1,3,4,5}
//在声明初始化有元素的数组时，也可以指定数组大小
string[] strings=new int[]{"H","E","L","L","O"}

变量名只有在某一区域内第一次出现时才需要声明变量
变量名在区域内第二次出现时不用声明变量，而是直接使用之前的变量
变量名命名是我们一般遵循命名法，即以小写字母开头，多个单词拼接时除第一个单词外，其余字母大写
在程序开发中可以修改之前保存的变量值

（int）表示使用显式强制转换，是一种类型转换，c#默认整形是int32，因此使用此方法转换成int 32位，不遵循四舍五入，只取整数部分
（int）5.21/输出5
int parse（）只支持将string类型转换成int，parse就是把string类型转换成int char double，也就是parse（string）括号中的一定是string类型
例如：
string st=“5.21”
double n=5.21；
Int.Parse(st);
Int.Parse(n);
Convert.Toint32(double value),不完全遵循四舍五入，如果value为两个整数中间的数字，则返回二者中的偶数，对比下面例子
console.writeline(convert.Toint32(4.5))4-5之间取4  5.5为5-6之间取6
注意 convert.toint32（）和int.Parse（）对于空值（null）的处置不同，convert.toint32（null）会返回而不会产生任何异常，但int.Parse(null)则会出现异常

对于数组的初始化还有一种简便的方式 string[] strs={“1”，“2”，“3”，“4”}；
获取数组的长度方式：str.length
需要跳出某个循环可以使用break关键字，是跳出当前循环
满足某些条件后需要直接快进到下一轮循环而不再执行当前循环下的代码，可以使用continue关键字实现

函数好比是对象的动作行为
在定义函数要想好函数所承担的作用，职责作用越单一越好
函数的命名规范
函数命名使用大驼峰命名，即开头首字母大写
多个单词拼接时候，所有单词首字母大写
Add()
AddCount()
函数的参数设置&传参行为
参数可以是外部需要帮忙处理的数据
外部通过传递参数的形式，将许哟啊处理的数据交给函数处理
函数返回值的设置
函数返回值可以认为是外部调用某种行为后得到的一种反馈

拓展-----参数修饰符
修饰符种类
1，无修饰符：如果一个参数没有用参数修饰符标记，则认为它将按值进行传递，这将意味着被调用的方法收到原始数据的一份副本
相当于传入了参数后修改参数了只在当前的方法生效，再次调用的时候，将会按照原来的参数进行计算
这里就是c#形参和实参的区别

2，out：输出参数由被调用的方法赋值，因此按引用传递，如果被调用的方法没有给输出参数赋值，就会出现编译错误，
out最大的用途就是调用者只使用一次方法的调用就能获得多个返回值

3，ref：调用者赋初值，并且可以由调用的方法可选的重新赋值（数据是按引用传递的），如果被调用的方法没能
给ref参数赋值，也不会有编译器的错误

4，了解即可params：这个参数修饰符允许将一组可变的数量的参数作为单独的逻辑参数进行传递，方法只能有一个
params修饰符，而且必须是方法的最后一个参数

out和ref的区别
out修饰的参数必须在方法内修改，而ref可以修改也可以不修改
out在传入参数的时候，参数是局部变量的话，可以不用赋值，因为out一定会对其及逆行赋值
而ref修饰的参数，在实参必须有初始值才能调用，因为ref修饰的不一定会给他赋值
out一般用法是主程序没有值，运行方法的时候才赋值。ref是方法需要主程序传值，在方法中改变他的值




面向对象oop基本概念
面向对象编程---object oriented programing简写oop
目标
了解面向对象基本概念
01，面向对象的基本概念
之前所接触到的编程方式叫做面向过程
面向过程和面向对象是两种不同的编程方式
对比面向过程的特点，可以更好的了解什么是面向对象
1.1过程和函数
过程是早期的一个编程概念
过程类似于函数，只能执行，但是没有返回值
函数不仅仅能执行，还可以返回结果
1.2面向过程和面向对象基本概念
1）面向过程-----怎么做
1，把完成某一个需求的所有步骤，从头到尾逐步实现
2）根据开发需求，将某些功能独立的代码封装成一个又一个的函数
3，最后完成的代码，就是顺序的调用不同的函数
特点
1，注重步骤与过程，不注重职责的分工
2，如果需求过于复杂，代码就会变得很复杂
3，复杂项目，没有固定的套路，难度很大！
面向对象------谁来做
相比较函数，面向对象是更大的封装，在一个对象中封装多个方法
1，完成某一个需求前，首先确定职责，要做的事情
2，根据职责确定 不同的对象，在对象内部封装不同的方法
3，最后完成代码，就是顺序的让不同的对象调用不同的方法
特点
1，注重对象和职责，不同的对象承担不同的职责
2，更加适合应对复杂的需求变化，是专门应对复杂项目开发，提供固定套路
3，需要在面向过程的基础上，再学习一些面向对象的语法

七，类和对象
目标
1，类和对象的概念
2，类和对象的关系
3，类的设计
01，类和对象的概念
类和对象是面向对象编程的两个核心概念
1，1类
类是对一群具有相同特征或者行为的事务的一个统称，是抽象的，不能直接使用
。特征被称为属性
。行为被称为方法
类就相当于制作汽车是的图纸，是一个模板，是负责创建对象的
1.2对象
。对象是由类创造出来的一个具体存在，可以直接使用
。由哪一个类创造出来的对象，就拥有在哪一个类中定义的属性和方法
。对象就相当于用图纸制作的汽车
类和对象的关系
类是模板，对象是根据类这个模板创建出来的，应该先有类，再有对象
类只有一个，而对象可以有很多个
。不同的对象之间属性的具体内容可能各不相同
类中定义了声明属性和方法，对象中就有声明属性和方法，不可能多，也不可能少

类的设计
在使用面向对象开发前，应该首先分析需求，确定一下程序中需要包含哪些类
在程序开发中要设计一个类，通常需要满足以下三个要素
1，类名 种类事务的名称，满足大驼峰命名法
2，属性 种类事务具有什么样的特征
3，方法 这类事物具有什么样的行为

3.1类名的确定
名词提炼法 分析整个业务流程，出现的名词，通常就是找到的类
3.2属性和方法的确定
对对象的特征，描述通常可以定义成属性
对象具有的行为，通常可以定义为方法，注明：方法一般是动作及动词
提示：需求没有设计的属性或者方法子啊设计类时，不需要考虑

04，类和对象的使用
4.1声明类
1，声明一个类需要使用class关键字
类的属性及方法写在（）中
public class Person{}
4.2声明属性
1，属性在c#中较为独特，他既不用同于方法，也不同于字段
2，属性依旧遵循大驼峰命名方法
3，属性最常用的书写方法：public int Age{get；set；}
4，如果属性中具有get关键字，说明可以获取该属性的值
5，如果属性中具有set关键字，说明可以向该属性设置值
4.5声明方法
4.4实例化
类使用关键字new实例化对象
一个类可以实例化多个对象
对象可以使用类定义的属性和方法

4.5知识拓展
访问修饰符
1，public 公有的所有的类都可以访问
2，private 私有的 当前类内不可以访问
3，protected：受保护的 当前类以及继承他的子类可以访问
4，internal：内部的 只限于本项目内访问 其他的不能访问
5，protected internal：内部保护访问 只能是本项目内部或者子类访问 其他类不能访问
访问级别约束：
父类子类访问修饰符要保持一致
方法的访问修饰符要和方法参数的访问修饰符保持一致
注意：类别的访问级别默认为 隐式私存需要加上public才可以让外部访问
静态方法，属性
静态和属性方法通过static关键字修饰
静态和属性可以通过类型直接获取，非静态则必须通过实例化对象获取
静态类
静态类通过static 关键字修饰
一般情况下类型不需要使用静态修饰，只有当类型中存在拓展方法时需要使用静态类
静态方法不是某个对象的属性，而是该类创建公用的，不管创建多少个对象，修改静态属性，其他的也会改变


十，集合和字典的初识
01，集合的使用
集合与数组的比较类似，都用于存放一组值
1.1数组的优劣分析
优势：数组在内存中时连续存储的，所以它的索引速度是非常快，而且赋值与元素也很简单
劣势：在数组的两个数据间插入数据很麻烦
在声明数组的时候，必须同时指明数组的长度，数组的长度过长，会造成内存浪费，数组和长度过短，会造成数据
溢出的错误
1.2ArrayList的使用
ArrayList是。net framework提供的用于数据存储和检索的专用类
它是命名空间system.Collections下的一部份
我们将一个对象输出到控制台的时候 默认情况下   打印的就是这个对象所在的类的命名空间
ArrayList的大小是按照其中存储的数据来动态扩充于收缩的
在声明ArrayList对象时并不需要指定它的长度
ArrayList可以很方便的进行数据的添加，插入和移除
在使用时，在获取和赋值等方面都快捷方便。但是当不确定数值多少时使用List更为方便
Insert插入的数据不会覆盖原来的索引处的内容，而是将索引处及之后的数据向后挤出一位

从上面的示例上看，arraylist好像是解决了数组中所有的缺点，那么他应该就是完美的，可是在c#2.0又会出现list集合
这是为什么呢？
求集合的长度是count
arrayList在存储数据时使用object类型进行存储的
arraylist不是类型安全的，使用的时候很可能会出现类型不匹配的错误
就算都有插入了同一类的数据，但在使用的时候，我们也需要将他们转化为原类型来处理
arraylist的存储存在装箱和拆箱操作，导致其性能低下
object是所有类的父类，在c#所有对象中最强类
list集合方便，arraylist还要拆箱声明输出类型麻烦一点
父类是可以接受子类的数据的

装箱与拆箱的概念
装箱就是将比如int类型或者string等不同的对象隐式转换赋给object对象
int i=123；
object 0=i；
拆箱就是将object对象通过显示转换 赋值给int类型的变量
object o=123；
int i=（int）o；
装箱与拆箱的过程会产生较多的性能损耗
正式因为arraylist存在不安全类型与装箱拆箱的缺点，所以c#2.0后出现了泛型的概念
泛型的概念在此先不多做表述，为便于大家记忆，可以简单理解成，限制集合只能存储单一类型数据的一种手段

List集合
目前我们只需要学习List集合这一种类型即可，以此为突破口，以后再学习其他集合就会非常容易
List集合的声明
List集合与arrayList由于都继承了相同的接口，故使用与arrayList相似
在声明List集合时，需要同时为其声明list集合内数据的对象类型
示例：List<int>intlist=new List<int>()
所需接口目前可以简单理解成限制和规定类型行为即类型方法的一种手段
上例中，如果我们往list集合中插入string字符“asd”,系统就会报错，且不能通过编译，这样子就可以避免了前面
所讲的类型安全问题与装箱拆箱的性能问题
思考
上一节“类的使用”中我们知道，int本身也是一个类型，int类型声明的变量接受int类型的数据，int类型可以指定
List集合的数据类型，那么我们自己创建的类型是否可以限定list集合的数据类型？

总结：
集合与数组比较类似，都用于存放一组值
集合中提供了特定的方法直接操作集合中的数据，并提供了不同的集合类来实现特定的功能
简单的说就是数组的升级版，也可以动态的对象集合的长度（也就是集合内最大元素的个数）进行定义和维护
list泛型的好处指通过允许指定泛型类或者方法操作的特定类型，减少类型强制转换的需要和运行时错误的可能性
泛型提供了类型安全，但没有增加开销
this：表示当前这个类的对象
类是不占内存的，而对象是占内存的
属性的存在就是在保护字段，因为一开始赋值的类没有其他所有的语法限制
以至于不存在赋值上的错误与正确之分，所以这时候需要属性来规范衡量
属性的本质就是两个方法get和set
get是赋值的，set是取值的
public string Name{
get {return _name;}
set{_name= value;}
}
get和set是两个方法具体是
public void set_Name(string value)
{
this_name=value;
}
public string get_Name()
{
return this._name;
}
可以直接赋值给属性，属性充当一个中间商赋值给字段
***字段是可以设置为私有，就是在main函数中不能直接调用到字段，这个时候属性的作用就是可以起到中间商访问到字段
属性是不能存值的，属性相当于一个过滤器，过滤掉错误的信息
***字段就是女人，属性才是男人
数据是不能随意被别人看到的，属性就是在外面跟别人打交道
一个字段就写一个属性
既有get和set的属性就叫做可读可写属性
 
静态方法与非静态方法的区别
1，在非静态类中，既可以有实例成员，也可以有非静态成员
2，在调用示例成员的时候，需要使用对象名.实例成员（）；
在调用静态成员的时候需要类名.静态成员
3，非静态成员就是属于对象的东西，是具体的成员，而静态成员就是跟类直接相关，要么是描述类，要么是提供这个类所应该提供的工具
总结：只要是静态成员就必须使用类名来调用，实例成员使用对象名来调用
          静态函数中，只能访问静态成员，不允许访问实例成员
          实例函数中，既可以使用静态成员，也可以使用实例成员
不能在静态类当中有实例成员
console也是一种静态类成员，静态类相当于一个函数库，用于实现很多不同的功能
console.writeline（）；就是静态类类名来实现方法
静态类就不用实现对象

使用：
1，如果你想要你的类当作一个“工具类”去使用，这个时候可以考虑将类写成静态类
2，静态类在整个项目中资源共享。类是不用占用内存，静态类本身是占用内存的
3，只有在程序运行结束之后静态类才会释放所有内存
堆  栈  静态存储区域在整个项目中谁都可以使用这个静态类
释放资源，GC Garbage Collection垃圾回收器
构造方法用来创建对象，并且可以在构造函数中对对象进行初始化
构造函数是用来创建对象的特殊方法，方法名和类名一样，没有返回值，连void都不用
构造函数可以有参数，new对象的时候传递函数参数即可
如果不指定构造函数，则类有一个默认的无参构造函数
如果指定了构造函数，则不再有默认的无参构造函数，如果需要无参构造函数，则需要自己来写
构造函数可以重载，也就是有多个参数不同的构造函数
7，构造函数
作用：帮助我们初始化对象（给对象的每一个属性依次的赋值）
构造函数是一个特殊的方法
1，构造函数没有返回值，连void也不能写
2，构造函数的名称必须和类名一样··
创建对象的时候就会动用到构造函数

8，new关键字
Person lisa =new person（）；
new帮助了我们做了三件事：
1）在内存中开辟了一块空间
2）在开辟的空间中创建对象
3）调用对象的构造函数进行初始化对象
记得记得，构造函数，既没有返回值void 也必须是类名称
构造函数是可以重载的。比如说你所需要定义六个，也可以定义三个，用同一个名字
类当中会有一个默认的无参数的构造函数，当你写出一个新的构造函数之后，不管是不是无参数的。那个默认的无参数构造函数都会被干掉
构造函数的便利就是，快速的给一个对象初始化


9，this关键字
1），代表当前类的对象
2），在类当中显示的调用本类的构造函数：this（）
这个写法可以节省很多冗余的代码
如vs2019exe所示
问为什么要写这么多一样的构造函数
答：因为永远不知道客户会写些什么东西上去。所以多写几个构造函数总没错

析构函数
当程序结束的时候，析构函数才执行
帮助我们快速的释放资源
GC可能会慢点储存在那，可以用析构函数快速的释放资源

namespace（命名空间），用于解决类重名问题，可以看作“类的文件夹”
如果代码和被使用的类在一个namespace则不需要using
在不同命名空间下的类调用有两种方法：
写全称    命名空间.类名
先用using引用命名空间，在调用
引入命名空间中的类，方便当前文件中调用
//A-->ProjectA---顾客类
//B-->ProjectB---顾客类
现在用到a和b这时候需要用using

1，命名空间
可以认为类是属于命名空间的
如果在当前项目中没有这个类的命名空间，需要我们手动的导入这个类所在的命名空间
命名空间。
1）用鼠标去点
2）alt+shift+f10
3）记住常用的命名空间


如何在一个项目当中引用另一个项目的类
2，在一个项目中引用另一个项目的类
1）添加引用
在vs2019中可以直接在依赖项中直接添加引用
2），引用命名空间
叫namespace的后面就是命名空间了哦

3，值类型和引用类型
区别：
1，值类型和引用类型在内存上存储的地方不一样
2，在传递值类型和传递引用类型的时候，传递的方式不一样
值类型我们称之为值传递，引用类型我们称之为引用传递
我们学的值类型和引用类型
值类型：int double bool char decimal struct enum
引用类型：string 自定义类，数组
存储
值类型的值是存储在内存的栈当中
引用类型的值是存储在内存的堆当中
引用类型的对象存储在内存的堆当中
可是引用类型的对象的地址是存储在内存的栈中

4，字符串
1），字符串的不可变性
string实际上是一个容器，也就是个类，包含自身的数据和方法
当你给一个字符串重新赋值之后，老值并没有销毁，而是重新开辟一个空间存储新值
换了个地址）给字符串大量的重新赋值循环中就会出现大量的垃圾。这时候则是需要gc
当程序结束后，GC扫描整个内存，如果发现有的空间没有被指向，则立即把它销毁
问为什么程序结束的时侯，才进行销毁，那么string类型的不可变性又有了什么意义
回答挂不得游戏越玩越卡，重启一下就会变快，就是因为，如果一直挂在电脑上的话程序不变，就会产生大量的垃圾
2），我们可以讲字符串看作是char类型的一个只读数组
在哪可以看地址
在调试的窗口中看即时然后输入&对象名
栈是变量本身的地址，堆是对象的实例地址
既然可以将string 看作char类型的只读数组，所以我可以通过下标去访问字符串中的某一个元素
如果是只读的话就是说明不可以通过数组类型的修改而改变string类型的数据
不能修改
tochararray();将字符串转换为char数组
new string（sh【】）；将字符数组转换为字符串
字符串给出的方法：
1），length求出字符串中的数组长度
2），toupper转换为大写形式
3），tolower转换为小写形式
4），s1.Equals(s2,StringComparison.OrdinalIgnoreCase)
在比较的过程中忽略了字符串中的大小写
string【】Split（params char【】separator）：将字符串按照
指定的分隔符分割为字符串数组
string【】Split（char【】separator，stringSplitOptions options）
将字符串按照指定的char分割符分割为字符串数组（options和
removeEmptyEntries的时候移除结果中的空白字符串）
5），split（chen，stringsplitoption.removeemptyentries）进行
字符串的分割

2），字符串的替换：stirng Replace（string，string new value）将字符串中的出现oldvalue的地方替换成newValue。例子：国家主席的替换
3），取子字符串：string Substring（int Startindex），取从位置Startindex开始一直到最后的子字符串
4）。string Substring（int startindex，int length），取从位置startindex开始长度为length的子字符串，如果子字符串的长度不足length则报错
5）  bool Contains(string value)判断字符串中是否含有子串value
6）  bool startwith（string value）判断字符串是否以子串value开始
7）  bool EndsWith（string value）判断字符串是否以value结束；
8）  int indexOf(string value):取子串value第一次出现的位置
9）  lastindexof取子串value最后一次出现的位置
10）Trim（）从当前system.string对象移除所有前导空白字符和尾部空白字符
11）TrimEnd（）只去掉后面的空格
12）TrimStart（）只去掉前面的空格
13）IsNullOrEmpty（）判断字符串是否为空值
14）string.join（“|”，name）可以将数组中的每个数据间插入你想要的字符
15)  int indexOf（string value，int startindex）



面向对象——-继承
封装其实就是把一些很常用的东西封装成一个方法进行调用
在开发的时候每次写一个类都应该重新新建一个类
这样子简洁易懂不容易出错
怎么快速生成get 和set的方法
ctrl+r+e+回车两次
继承可以消除类中冗余的类的代码
把这几个类中重复的成员单独的拿出来封装成一个类，然后单独的拿出来作为一个类作为他们的父类
不同于this的方法，this是类中的方法调用
继承的话就是
先建立一个类然后再在类后面：preson
我们可能会在一些类中，写一些重复的成员，我们可以将这些重复的成员
单独的封装到一个类中，作为这些类的父类
student teacher 子类 派生类
person               父类 基类
子类继承了父类，那么子类从父类那里继承过来了什么
子类继承了父类的属性与方法，但是没有继承父类的私有字段：比如你不能碰你的爸爸的私房钱
保护的不能碰
6，继承的特性
1，继承的当根性；
2，继承的传递性；
它不仅可以传递给它儿子还可以是孙子，孙子最吃香

7，查看类图
去下载

问题：子类有没有继承父类的构造函数？
子类的构造函数里有默认的一句代码super（）：即调用父类的无参构造
刚刚的调试过程就可以知道子类中的默认的构造无参函数，会直接的调用父类的无参函数
类不占内存，只能先创建对象，这样子子类才能使用父类中的属性和方法
只有把父类的对象创建出来之后才能给你儿子继承出来
子类会默认的调用父类无参数的构造函数
创建父类的对象，让子类可以使用父类中的成员
这里是使用了关键字super
所以，如果在父类中重新写了一个有参数的构造函数之后，那个无参数的就被干掉了
子类就调用不到了，所以子类会报错
解决方法：
1）在父类中重新写一个无参数的构造函数
2）在子类中显示的调用父类的构造函数，使用关键字base（）
子类想要强行的使用父类的构造函数就直接创建子类构造函数然后使用base（）强行调用
8，object是所有类的基类

9，里式转换
1）子类可以赋值给父类
2）如果父类中装的是子类对象，那么可以将这个父类强转为子类对象
子类对象可以调用父类中的成员，但是父类对象永远都只能调用自己的成员
子类大于等于父类，父类的寻址范围不会超出子类的范围，所以子类就能直接赋值给父类
一个子类对象可以在继承关系里来回转，只不过成派生类时转回基类需要显示转换
如果父类的子类对象与后面父类强制转换的子类对象不一样的时候，就不能成功转换，否则会报错

10，is：表示类型转换，如果能够转换成功，则返回一个true 否则返回一个false bool类型
      as：表示类型转换，如果能够转换则返回对应的对象，否则返回一个null
11，父类的类型的，只能调用到父类方法和属性，却不能调用到子类方法，只能强制转换后才能调用的到
12，protected（s）访问修饰符不允许其他非子类访问
修改刚刚的练习，父类中把访问修饰符改成protected子类中还能被调用到吗？其他非子类能调用到吗？
继承的传递性
继承的单根性
public     private    protected
4，protected
受保护的：可以在当前类的内部以及该类的子类中访问
count：表示这个集合中实际包含的元素的个数
capcity：表示这个集合可以包含的元素个数
当你超过可包含的个数的时候就会给你多申请一倍的空间这样子集合的空间就肯定够用
collections本身就是容器的意思
5，arraylist集合的长度问题
每次集合中实际包含的元素个数（count）超过了可以包含的元素的个数（capcity）的时候
集合就会向内存申请原来的一倍的空间

HashTable方法：
HashTable的增删查存判
1，添加数据，都是“键值对”的形式
2，键值对均是object类型
3，键值对中的键就是为了找数据用的，必须提供，不允许重复
4，hashtable使用键作为寻找的方式，是一种无序的结构
5，得到数据
6，使用（hashtable实例名）【键】，将返回object类型，由键对应的数据
强转，使用里氏转换原则
6，hashtable键值对集合  字典  孙    sun-----孙
字典    存在一个一个的键值对
每一个键就会对应一个每一个元素
7，foreach循环
var   c#是一门强类型语言   ：在代码当中，必须对每一个变量的类型有一个明确的定义
 js是一门弱类型语言：
n.gettype()可以输出元素的类型
var：根据值能够推断出来类型
var：一定先要赋初值，有的时候不能一开始直接赋初值，所以不太喜欢使用var
foreach循环的效率可以是for循环很多倍
在键值对集合当中，我们是根据键取找值的
键值对对象【键】=值；
********：键值对集合当中，键必须是唯一的，而值是可以重复的
因为hashtable是通过键去找值的，如果键一样，而值不一样就会出现混乱不知道该找的是哪一个值
而如果你不同的键去找相同的值确是可以
如果是ht[]="";添加hashtable数据的话其实有两种情况。
如果1）之前有的就可以给他覆盖掉
2）之前如果没有的就可以新增数据进去
ht.contains跟ht.containskey（）的用法是相同的
不过跟ht.containsvalue（）是不同的
前者是判断是否键是一样的，后者是判断键后面的值是否一样的
hashtable可以作为换简体繁体字
const修饰的变量，只能被访问，不能被修改
总结一下前面的知识，继承上来说
分派生类继承基类，与基类的里氏转换，构造函数的使用是为了减少冗余的代码而使用的
而这里面继承父类的有参构造函数可以使用的是base（），里氏转换中，值得注意的是
有些时候要调用父类的时候，父类的对象是子类的对象的前提下，可以直接调用子类对象
还有这里面的强制转换（（int【】）ht），还有学习到的arraylist的使用跟hashbase字典的
path类：path类中的方法
获取文件名：getfilename
获取文件名但是没有拓展名：getfilenamewithoutextension
获取文件的拓展名：getextension
获得文件所在的文件夹的名称：getdirectoryname
获取文件的所在的全路径getfullpath
链接两个字符串作为路径：combine

file类也是静态类
file.creat方法每次运行就会对应的修改时间会发生一次改变，而
创建时间却不会发生改变
请注意的是，千万别去尝试c盘中的其他文件夹，若删除了回收站
连残尸都没有
编码：将字符串以怎么样的形式保存为二进制
乱码：产生乱码的原因，就是你保存文件所采用的编码，跟你
打开这个文件所采用的编码形式不一样
file类中的方法readalllines   readalltext   raedallbtye
分别输出的是字符串数组，字符串   字节数组
其中第三个readallbyte是可以解释所有的文件
而前面两个只能解释文本文件
第二个解释文本文件最简单的就是readalltext方法可以直接输出字符串
1，绝对路径和相对路径
绝对路径：   通过给定的这个路径直接能在我的电脑中找到这个文件
相对路径：   文件相对于应用程序的路径
相对路径其实就是相当于在你程序所运行的而文件中的位置，
需要用到的时候就不需要在前面打前缀，只需要名称就ok了，
前面就不需要@了
而绝对路径就是直接打全路径帮你在电脑上回复给你

1，绝对路径的优点：
A，如果有人抄袭你的网站的内容，里面的链接还会指向你的网站
有些抄袭的人比较懒，根本不会去改变内容，其实也不局限于被
抄袭，如果有人将你的网页保存到本地电脑中，里面的链接，图片
css，以及js仍然会链接到你的网站
B，如果网页位置改变，里面的链接还是指向正确的url
2，绝对路径的缺点
A，在编码编写的时候不方便使用绝对路径，因为链接应该指向
真正的域名而不是开发站点。
相对路径的优缺点和绝对路径几乎相反
3，相对路径的优点：
A，容易移动内容，可以整个目录移动
B，测试方法比较灵活，本机测试时比较方便
4，相对路径的缺点：
A，部分内容页面换了位置时，链接容易失效
B，容易被人大面积抄袭
结论：
我们在开发中应该最好使用的是相对路径

list泛型集合：
确定了泛型集合的类型，那么整个集合就是该类型
2，装箱，拆箱
装箱：就是将值类型转换为引用类型
拆箱：将引用类型转换为值类型
看两种类型是否发生了装箱或者拆箱，要看这两种类型
是否存在继承关系。
有继承关系才有可能存在装箱和拆箱，没有继承关系就
没有可能存在装箱和拆箱的关系


dictionary跟hashtable是一样的
不过dictionary要先确定键值的类型
filestream 与file的区别
filestream是一点一点的去读     操作字节的
straemreader和streamwriter操做字符的
当然filestream是用在一个大文件中可以减轻内存的负荷
将字节数组中每个怨怒是按照指定的编码格式解码成字符串
关闭流
skfile.close();
解释流所占用的资源
skfile.dispose();
若是多出来的字节就会使用空，还会解码
解码也可以这样子解码
string s=encoding.default.getstring(buffer,0,r);
这样子就可以严格控制实际解码的解码数，可是它读还是会按照你所给的数组的长度进行去读取

3，将创建文件流对象的过程中卸载using当中，会自动的
帮助我们释放流所占用的资源

记得记得出现乱码主要是编码方式那里出现了问题，只需要改变编码方式既可以防止乱码

4，多态的手段1），虚方法1，将父类的方法标记为虚方法，使用关键字virtual这个函数可以被子类重新写一个遍，配上override原本父类只能调用父类方法，但是重写后可以调用子类相当于实例父类，但是根据对象不同。使用的方法也就不同比如写一个通用的方法，主体是父类，参数是子类，以后拓展代码只要改下参数就好new与virtual的区别，new的效果是子类调用子类，父类调用父类，各管各，并没有实现到多态override的效果就是实例父类，根据对象子类的不同，可以实现不同的方法可以写出通用的代码，不用每次实例子类虚方法一定要函数名字一样才能使用虚方法第一一定是要设定一个父类然后再重写的方法上面写上virtual，子类方法中写上override2），抽象类当父类中的方法不知道如何去实现的时候，可以考虑将父类写成抽象类。将方法写成抽象方法abstract方法和类中加入，变成抽象方法不用方法体抽象类是没有方法体就是没有{}当父类不知道怎么标出来的时候，就直接设置抽象类，然后让子类重写方法就可以实现多态抽象类不让创建对象有公用的特性，可没有可写的方法就是用抽象类来使得子类重写最后调用子类方法实现多态子类的方法也要写入override抽象类也是类，也有属性与方法抽象类与虚方法的区别在于，抽象类是本身是平辈的，不过需要一个父类做它的基类，而选方法是再给定的需求里有了继承的关系用虚方法或者抽象类直接看父类你能不能想到方法想不到就用抽象类抽象类的意义：1，封装公共成员，2，体验多态性，3，抽象成员无法实现，4，强制子类实现，5，增强代码的健壮性6，便于子类拓展，7，与客户业务解耦在抽象类里面是可以使用虚方法3），接口接口也不能创建对象

c#中的访问修饰符public：公开的公共的private：私有的，只能在当前类的内部访问protected：受保护的：只能在当前类的内部以及该类的子类中访问internal：只能在当前的项目中访问，或者是程序集中访问protected internal：protected+internal的权限1），能够修饰类的访问修饰符只有public和internal不加public的话就默认是internal如果想调用别的项目的类就只要在引用中修改添加你想要的类的项目然后再填下你的命名空间，最后只能调用的是public在同一个项目中，internal和public的权限是一样的2）可访问性不一致：子类的访问权限和父类的访问权限是不一致的子类的访问权限不能高于父类的访问权限，不然就会暴露父类的成员也就可以说明了public为什么不能继承internal的类就是因为如果可以继承的话那么就会失去了internal之前的宗旨，散失了对其他项目不可以访问的权限2，设计模式：设计这个项目的一种方式<大话设计模式>了解一下 3,简单工厂设计模式模式就是得到很好研究的范例走位上围魏救赵声东击西设计模式是软件开发过程中经验的积累特定问题的经过实践检验的特定解决方法一共已有的设计模式有二十三种
简单工厂设计模式值传递和引用传递int double char decimal bool enum struct引用类型string 数组 自定义类 集合 object 接口值传递和引用传递类型的传递方式4，值类型在复制的时候，传递的是这个值的本身赵老师给的实例中都是李四，传递的是地址值，操作的都是同一个内存空间中的为什么呢是李四呢？引用类型在复制的时候，传递的是对这个对象的引用。首先创建的对象怕的地址是在new person（）的地址p2=p1是把栈的复制粘贴给了p2作为p2的地址然后再改他们随便两个其中一个的东西就会导致的是最后输出的也是一样的只要操作一个另一个也会随之而改变注意哦堆不是删除掉覆盖掉，而是先append然后调用最后用gc删除掉的之哟啊没有重新new一个对象出来，指向的都是同一个对象他们在栈中的地址是不一致的，而在堆中的地址却是相同的引用传递中唯一一个特殊的是string类型会输出的是张三和李四字符串是有一个不可变性，因为每一个开辟一个元素的时候就已经new出来一个对象可是字符串也有栈和堆的分别ref把一个变量以参数的方式带入方法中然后实现之后再带出来ref传递的是地址re在调用方法前，必须要实例化参数在即使窗口中看地址的方式是&加实例使用ref不同于值传递只是传递一个值过去，而是引用传递传递一个地址过去让其去修改也就i是有了ref就可以实现已经实例化的对象的地址共享去改变5，序列化：就是将对象转换为二进制反序列化：就是将二进制转换为二进制作用：传输数据序列化和反序列化的作用就是保存程序的状态序列化：1），将这个类标记为可以序列化的serializable binaryformatter序列化对象filestream继承于stream6，partial部分类，的原理就是如果做同一个项目的时候需要创建的类的名字相同，那么将这个类拆分出来成为几个部分然后分别编程就可以得到最后的功能部分类中不能有重复的类，不过可以写出一个无参和一个有参7，sealed密封类不能够被继承，但是可以继承于其他类：相当于太监类有爷无后8，重写tostring 方法直接把对象tostring就是要输出这个类的命名空间tostring是object方法9，接口继承有单根性，这时候使用接口来实现补充类是不可以多继承的，但是实际上可是需要其他类中的方法这时候，就是需要的是使用接口的方式来实现接口就是继承它的类都用它的方法名接口就是一个规范，能力【public】interface I。。able{成员；}成员中不需要public等等不允许写具有方法体的函数接口不能包含字段，字段是用来存数据的，可接口不需要你写字段属性是可以的 	自动属性和普通属性的区别写法是由区别的，一个没有字段一个没有字段，不过自动属性是没有限制的，如果需要限制，则使用构造函数进行限制接口的实现表现方式跟继承差不多，不过当有一个类跟一个接口的时候就应该使用先继承类然后，接口接口，抽象类，静态类都是不可以实现实例化的接口是一个类不过不能被实例化出来就像抽象方法一样需要实例子类来调用里面的方法，从而实现多态化只要是继承了接口就必须实现接口上的方法一个接口可以继承一个或者多个接口基类person必须在任何接口之前